多线程的创建

问题一：
创建方式主要分两种：扩展Thread类 和 重写Runnable方法
主要掌握Runnable同步代码块的写法：创建implements的接口->重写run（）(synchronize)   ->建参，并传递到Thread类中->调用start（）
    synchronize 相当于一个同步代码锁，可以解决线程的安全问题。
写法：
eg:创建三个窗口卖票，总票数为一百.
class windows1 implements Runnable{
    private int ticket = 100;
    //Object obj = new Object();
    @Override
    public void run() {
        while (true) {
            synchronized (this) {
                if (ticket > 0) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    System.out.println(Thread.currentThread().getName() + ":卖票，票号为：" + ticket);
                    ticket--;
                } else {
                    break;
                }
            }
        }
    }
}

public class WindowTest1 {
    public static void main(String[] args) {
        windows1 windows1 = new windows1();

        Thread t1 = new Thread(windows1);
        Thread t2 = new Thread(windows1);
        Thread t3 = new Thread(windows1);
        t1.setName("窗口一");
        t2.setName("窗口二");
        t3.setName("窗口三");
        t1.start();
        t2.start();
        t3.start();
    }
}

问题二：
线程通信：可实现线程的交替进行
涉及到的三个方法：
 * wait（）：一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器
 * notify（）：一旦执行此方法，就会唤醒wait的一个线程，如果有多个线程，就会唤醒优先级高的
 * notifyAll（）：一旦执行此方法，就会唤醒所有被wait的线程。